"use client";

import * as React from "react";
import Image from "next/image";
import { Card } from "@/components/ui/card";
import { useInView } from "framer-motion";

type Step = {
  id: 1 | 2 | 3 | 4;
  title: string;
  description: string;
  icon: string;
};

function Typewriter({
  text,
  startDelay = 0,
  speed = 30,
  className = "",
  as: Tag = "span",
}: {
  text: string;
  startDelay?: number;
  speed?: number;
  className?: string;
  as?: React.ElementType;
}) {
  const ref = React.useRef<HTMLElement | null>(null);
  const inView = useInView(ref, { once: true, margin: "-15% 0px" });
  const [count, setCount] = React.useState(0);

  React.useEffect(() => {
    if (!inView) return;
    let timer: number | NodeJS.Timeout;
    let raf: number | NodeJS.Timeout;
    const start = () => {
      timer = setInterval(() => {
        setCount((c) => {
          if (c >= text.length) {
            clearInterval(timer);
            return c;
          }
          return c + 1;
        });
      }, speed);
    };
    if (startDelay > 0) {
      raf = setTimeout(start, startDelay);
    } else {
      start();
    }
    return () => {
      clearInterval(timer);
      clearTimeout(raf);
    };
  }, [inView, startDelay, speed, text.length]);

  return (
    <Tag
      ref={ref}
      className={className}
      style={{ wordBreak: "break-word", overflowWrap: "anywhere" }}
    >
      {text.slice(0, count)}
      {count < text.length && (
        <span className="inline-block w-[1px] align-baseline animate-pulse h-[1em] translate-y-[2px] bg-[#112639] ml-[2px]" />
      )}
    </Tag>
  );
}

export function ProcessSection() {
  const steps: Step[] = [
    {
      id: 1,
      title: "X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ",
      description:
        "Antco ƒë·ªÅ cao s·ª± t∆∞∆°ng t√°c v√† th·∫•u hi·ªÉu ƒë·ªÉ x√°c ƒë·ªãnh v√† t√¨m ra c√°c th√°ch th·ª©c m√† ƒë·ªëi t√°c ƒëang g·∫∑p ph·∫£i",
      icon: "/images/Solution.svg",
    },
    {
      id: 2,
      title: "Tri·ªÉn khai demo",
      description:
        "D·ª±a t·ª´ s·ª± th·∫•u hi·ªÉu, t·ª´ n·ªÅn t·∫£ng c√¥ng ngh·ªá, Antco s·∫Ω t·∫°o ra nh·ªØng demo cho c√°c gi·∫£i ph√°p s√°ng t·∫°o, ph√π h·ª£p nh·∫•t cho t·ª´ng s·∫£n ph·∫©m.",
      icon: "/images/Solution-2.svg",
    },
    {
      id: 3,
      title: "X√¢y d·ª±ng gi·∫£i ph√°p c·ªông t√°c",
      description:
        "Antco ph·ªëi h·ª£p ƒë·ªÉ ph√°t tri·ªÉn v√† t√≠ch h·ª£p gi·∫£i ph√°p li√™n t·ª•c gi√∫p kh√°ch h√†ng d·ªÖ d√†ng theo d√µi ti·∫øn ƒë·ªô v√† ƒë∆∞a ra ph·∫£n h·ªìi k·ªãp th·ªùi, t·ªëi ƒëa ho√° ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.",
      icon: "/images/Solution-1.svg",
    },
    {
      id: 4,
      title: "Ph√°t tri·ªÉn ƒë·ªÅ xu·∫•t",
      description:
        "Antco x√¢y d·ª±ng c√°c ƒë·ªÅ xu·∫•t gi·∫£i ph√°p chi ti·∫øt ƒë·ªÉ ƒë√°p ·ª©ng v√† c·∫£i ti·∫øn s·∫£n ph·∫©m theo s·ª± ƒë·ªïi m·ªõi c√¥ng ngh·ªá cho ƒë·ªëi t√°c.",
      icon: "/images/Solution-3.svg",
    },
  ];

  const StepCard = ({
    s,
    align = "left",
    className = "",
    delay = 0,
  }: {
    s: Step;
    align?: "left" | "right";
    className?: string;
    delay?: number;
  }) => {
    const titleSpeed = 25;
    const descSpeed = 12;
    const descDelay = delay + s.title.length * titleSpeed + 200;

    return (
      <Card
        className={[
          "bg-[#F5F8FF] border-2 border-white shadow-sm",
          "rounded-[12px] p-3",
          "sm:rounded-[14px] sm:p-4",
          "md:rounded-[16px] md:p-5",
          "lg:rounded-[20px] lg:p-6",
          "xl:rounded-[24px] xl:p-8",
          "overflow-hidden w-full",
          className,
        ].join(" ")}
      >
        <div className={align === "right" ? "xl:text-right" : ""}>
          <Typewriter
            as="h3"
            text={s.title}
            startDelay={delay}
            speed={titleSpeed}
            className="font-semibold text-[#112639] mb-2 text-[16px] leading-[22px] md:text-[20px] md:leading-[24px] lg:text-[24px] lg:leading-[32px]"
          />
          <Typewriter
            as="p"
            text={s.description}
            startDelay={descDelay}
            speed={descSpeed}
            className="
              text-[#7B849F]
              text-[13px] leading-5
              md:text-[14px] md:leading-6
              lg:text-[15px] lg:leading-[22px]
              xl:text-[16px] xl:leading-[24px]
            "
          />
        </div>
      </Card>
    );
  };

  const IconBadge = ({ src, alt }: { src: string; alt: string }) => (
    <div
      className="flex items-center justify-center bg-white border-[6px] border-white/40 rounded-full shrink-0"
      style={{ width: "var(--icon)", height: "var(--icon)" }}
    >
      <Image src={src} alt={alt} width={34} height={34} />
    </div>
  );

  const delayFor = (id: number) => (id - 1) * 250;

  return (
    <section className="w-full bg-[#DEEAFB] pb-10 md:pb-12 xl:pb-0 overflow-x-hidden min-h-[1200px] xl:min-h-[1200px]">
      <div className="mx-auto max-w-[1918px] px-4 md:px-6 relative">
        {/* Header */}
        <header className="text-center mx-auto max-w-[1006px] pt-8 md:pt-12 xl:pt-[100px] mb-8 md:mb-10 xl:mb-6">
          <h2 className="text-[#0749AD] font-semibold leading-[1.3] mb-3 md:mb-4 text-[28px] md:text-[40px] xl:text-[56px]">
            Quy tr√¨nh ph√°t tri·ªÉn 4 b∆∞·ªõc
          </h2>
          <p className="text-[#7B849F] mx-auto text-sm md:text-base xl:text-[20px] xl:leading-8">
            Antco cung c·∫•p quy tr√¨nh ph√°t tri·ªÉn AI linh ho·∫°t, gi√∫p doanh nghi·ªáp
            d·ªÖ d√†ng t√≠ch h·ª£p AI v√†o c√°c h·ªá th·ªëng hi·ªán c√≥ nh∆∞ CRM, ERP v√† n·ªÅn
            t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠.
          </p>
        </header>

        {/* Wrap image + cards */}
        <div
          className="
    relative mx-auto max-w-[1918px]
    [--img-shift:clamp(5px,1.6vw,28px)]
    [--d:380px] md:[--d:520px] xl:[--d:clamp(440px,42vw,680px)]
    /* üëá card r·ªông h∆°n, kh√¥ng b·ªã ng·∫Øn */
    [--card-w:clamp(300px,26vw,356px)]
    [--gap-x:clamp(16px,2vw,24px)]
    [--icon-gap:clamp(10px,1.2vw,16px)]
    [--icon:clamp(60px,9vw,72px)]
    xl:h-[calc(var(--d)+180px)]
  "
        >
          {/* process.svg */}
          <Image
            src="/images/process.svg"
            alt="Process"
            priority
            width={680}
            height={680}
            className="block mx-auto mt-6 md:mt-8 xl:mt-0 xl:absolute xl:left-1/2 xl:-translate-x-1/2"
            style={{
              width: "var(--d)",
              height: "var(--d)",
              top: "calc(52% - var(--d)/2 - min(40px, calc(var(--d)*0.00005)) + var(--img-shift))",
            }}
          />

          {/* Mobile & Tablet */}
          <div className="xl:hidden mt-8 md:mt-10 space-y-5 md:space-y-6">
            {steps.map((s) => (
              <div
                key={s.id}
                className="flex items-start gap-[var(--icon-gap)]"
              >
                <IconBadge src={s.icon} alt={s.title} />
                <div className="flex-1">
                  <StepCard s={s} delay={delayFor(s.id)} />
                </div>
              </div>
            ))}
          </div>

          {/* Desktop */}
          <div className="hidden xl:block">
            {/* Tr√°i tr√™n */}
            <div
              className="absolute max-w-full"
              style={{
                left: "calc(50% - var(--d)/2 - var(--gap-x))",
                top: "calc(50% - var(--d)/2 + calc(var(--d)*0.083))",
                width: "min(100%, var(--card-w))",
                transform: "translateX(-100%)",
              }}
            >
              <StepCard s={steps[0]} delay={delayFor(1)} align="right" />
            </div>

            {/* Tr√°i d∆∞·ªõi */}
            <div
              className="absolute max-w-full"
              style={{
                left: "calc(50% - var(--d)/2 - var(--gap-x))",
                top: "calc(50% - var(--d)/2 + calc(var(--d)*0.73))",
                width: "min(100%, var(--card-w))",
                transform: "translateX(-100%)",
              }}
            >
              <StepCard s={steps[2]} delay={delayFor(3)} align="right" />
            </div>

            {/* Ph·∫£i tr√™n */}
            <div
              className="absolute max-w-full"
              style={{
                left: "calc(50% + var(--d)/2 + var(--gap-x))",
                top: "calc(50% - var(--d)/2 + calc(var(--d)*0.083))",
                width: "min(100%, var(--card-w))",
              }}
            >
              <StepCard s={steps[1]} delay={delayFor(2)} align="left" />
            </div>

            {/* Ph·∫£i d∆∞·ªõi */}
            <div
              className="absolute max-w-full"
              style={{
                left: "calc(50% + var(--d)/2 + var(--gap-x))",
                top: "calc(50% - var(--d)/2 + calc(var(--d)*0.73))",
                width: "min(100%, var(--card-w))",
              }}
            >
              <StepCard s={steps[3]} delay={delayFor(4)} align="left" />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
